name: Nightly Tests

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  CI: true

jobs:
  determine-sdks:
    name: Determine SDKs
    runs-on: ubuntu-latest
    outputs:
      sdk_install_list: ${{ steps.sdks.outputs.sdkInstallList }}
      latest_sdk: ${{ steps.sdks.outputs.latestSdk }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Read SDK versions
      id: sdks
      shell: pwsh
      run: |
        function Resolve-Value {
          param(
            [string]$Value,
            [hashtable]$Map,
            [int]$Depth = 0
          )
          if ([string]::IsNullOrWhiteSpace($Value)) { return '' }
          if ($Depth -gt 8) { return $Value }
          return [regex]::Replace($Value, '\$\(([^)]+)\)', {
              param($match)
              $name = $match.Groups[1].Value
              if ($Map.ContainsKey($name)) {
                return Resolve-Value -Value $Map[$name] -Map $Map -Depth ($Depth + 1)
              }
              return $match.Value
            })
        }

        [xml]$props = Get-Content -LiteralPath 'Directory.Build.props'
        $propGroups = $props.Project.PropertyGroup
        $values = @{}
        foreach ($group in $propGroups) {
          foreach ($child in $group.ChildNodes) {
            if ($child.NodeType -eq [System.Xml.XmlNodeType]::Element) {
              $values[$child.Name] = $child.InnerText.Trim()
            }
          }
        }

        $keys = 'DotNet6Version','DotNet7Version','DotNet8Version','DotNet9Version','DotNetLatestVersion'
        $sdkList = @()
        foreach ($key in $keys) {
          if ($values.ContainsKey($key)) {
            $resolved = (Resolve-Value -Value $values[$key] -Map $values).Trim()
            if (-not [string]::IsNullOrWhiteSpace($resolved)) {
              $sdkList += $resolved
            }
          }
        }
        $sdkList = $sdkList | Select-Object -Unique
        if ($sdkList.Count -eq 0) {
          throw 'No SDK versions found in Directory.Build.props.'
        }
        $joined = $sdkList -join "`n"
        $latest = (Resolve-Value -Value $values['DotNetLatestVersion'] -Map $values).Trim()
        if ([string]::IsNullOrWhiteSpace($latest)) {
          $latest = $sdkList[-1]
        }
        "sdkInstallList=$joined" >> $env:GITHUB_OUTPUT
        "latestSdk=$latest" >> $env:GITHUB_OUTPUT

  full-test-suite:
    name: Full Test Suite on ${{ matrix.os }}
    needs: determine-sdks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ needs.determine-sdks.outputs.sdk_install_list }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release
      env:
        CI: true

    - name: Run ALL tests (including slow)
      run: dotnet test --no-build --configuration Release --logger "trx;LogFileName=test-results-full.trx" --collect:"XPlat Code Coverage" --settings coverlet.runsettings
      timeout-minutes: 30
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-full-${{ matrix.os }}
        path: '**/test-results-full.trx'
        retention-days: 7

  performance-benchmark:
    name: Performance Benchmarks
    needs: determine-sdks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ needs.determine-sdks.outputs.latest_sdk }}

    - name: Build Release
      run: dotnet build --configuration Release
      env:
        CI: true

    - name: Run performance tests
      run: |
        echo "=== Argon2 Performance ===" > performance.txt
        dotnet test --filter "FullyQualifiedName~Argon2&Category=Slow" --configuration Release --no-build --logger "console;verbosity=detailed" >> performance.txt
        echo "=== Blake2b Performance ===" >> performance.txt
        dotnet test --filter "FullyQualifiedName~Blake2b" --configuration Release --no-build --logger "console;verbosity=detailed" >> performance.txt
        echo "=== RSA/PGP Performance ===" >> performance.txt
        dotnet test --filter "FullyQualifiedName~Pgp&Category=Slow" --configuration Release --no-build --logger "console;verbosity=detailed" >> performance.txt

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance.txt
        retention-days: 30
