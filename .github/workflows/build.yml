name: Build Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  NUGET_XMLDOC_MODE: skip
  CI: true

jobs:
  determine-matrix:
    name: Determine Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      sdk_list: ${{ steps.matrix.outputs.sdkList }}
      sdk_install_list: ${{ steps.matrix.outputs.sdkInstallList }}
      latest_sdk: ${{ steps.matrix.outputs.latestSdk }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Compute framework matrix
      id: matrix
      shell: pwsh
      run: |
        function Resolve-Value {
          param(
            [string]$Value,
            [hashtable]$Map,
            [int]$Depth = 0
          )
          if ([string]::IsNullOrWhiteSpace($Value)) { return '' }
          if ($Depth -gt 8) { return $Value }
          return [regex]::Replace($Value, '\$\(([^)]+)\)', {
              param($match)
              $name = $match.Groups[1].Value
              if ($Map.ContainsKey($name)) {
                return Resolve-Value -Value $Map[$name] -Map $Map -Depth ($Depth + 1)
              }
              return $match.Value
            })
        }

        [xml]$props = Get-Content -LiteralPath 'Directory.Build.props'
        $propGroups = $props.Project.PropertyGroup

        $values = @{}
        foreach ($group in $propGroups) {
          foreach ($child in $group.ChildNodes) {
            if ($child.NodeType -eq [System.Xml.XmlNodeType]::Element) {
              $values[$child.Name] = $child.InnerText.Trim()
            }
          }
        }

        if (-not $values.ContainsKey('SupportedTargetFrameworks')) {
          throw 'SupportedTargetFrameworks not found in Directory.Build.props.'
        }

        $supportedTfmsRaw = Resolve-Value -Value $values['SupportedTargetFrameworks'] -Map $values
        $supportedTfms = $supportedTfmsRaw -split ';' | ForEach-Object { $_.Trim() } | Where-Object { $_ }

        $runtimeTfms = @()
        if ($values.ContainsKey('ContinuousIntegrationTargetFrameworks')) {
          $runtimeTfmsRaw = Resolve-Value -Value $values['ContinuousIntegrationTargetFrameworks'] -Map $values
          $runtimeTfms = $runtimeTfmsRaw -split ';' | ForEach-Object { $_.Trim() } | Where-Object { $_ }
        }
        if ($runtimeTfms.Count -eq 0) {
          $runtimeTfms = $supportedTfms
        }

        $runtimeSet = $runtimeTfms | ForEach-Object { $_.ToLowerInvariant() }

        $versionMap = @{}
        foreach ($key in $values.Keys | Where-Object { $_ -like 'DotNet*Version' }) {
          $versionMap[$key] = (Resolve-Value -Value $values[$key] -Map $values).Trim()
        }

        function Get-Sdk {
          param([string]$Tfm)
          switch -Wildcard ($Tfm) {
            'net6.*' { return $versionMap['DotNet6Version'] }
            'net7.*' { return $versionMap['DotNet7Version'] }
            'net8.*' { return $versionMap['DotNet8Version'] }
            'net9.*' { return $versionMap['DotNet9Version'] }
            'netstandard*' { return $versionMap['DotNetLatestVersion'] }
            default { return $versionMap['DotNetLatestVersion'] }
          }
        }

        $osList = @('ubuntu-latest','windows-latest','macos-latest')
        $entries = @()
        foreach ($os in $osList) {
          foreach ($tfm in $supportedTfms) {
            if ($tfm -eq 'netstandard2.0' -and $os -ne 'ubuntu-latest') {
              continue
            }
            $sdk = Get-Sdk -Tfm $tfm
            if ([string]::IsNullOrWhiteSpace($sdk)) {
              $sdk = $versionMap['DotNetLatestVersion']
            }
            $runTests = $runtimeSet -contains $tfm.ToLowerInvariant()
            $entries += [pscustomobject]@{
              os = $os
              framework = $tfm
              sdk = $sdk
              runTests = $runTests
            }
          }
        }

        if ($entries.Count -eq 0) {
          throw 'No matrix entries computed from Directory.Build.props.'
        }

        $sdkList = $entries | Select-Object -ExpandProperty sdk -Unique
        $matrixJson = @{ include = $entries } | ConvertTo-Json -Compress
        $sdkJson = $sdkList | ConvertTo-Json -Compress
        $sdkInstall = $sdkList -join "`n"
        $latest = $versionMap['DotNetLatestVersion']
        if ([string]::IsNullOrWhiteSpace($latest)) {
          $latest = $sdkList[-1]
        }
        "matrix=$matrixJson" >> $env:GITHUB_OUTPUT
        "sdkList=$sdkJson" >> $env:GITHUB_OUTPUT
        "sdkInstallList=$sdkInstall" >> $env:GITHUB_OUTPUT
        "latestSdk=$latest" >> $env:GITHUB_OUTPUT

  test:
    name: Test ${{ matrix.framework }} on ${{ matrix.os }}
    needs: determine-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.determine-matrix.outputs.matrix) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET SDK ${{ matrix.sdk }}
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ matrix.sdk }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Build.props', '**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies (library)
      if: matrix.runTests != true
      run: dotnet restore src/HeroCrypt/HeroCrypt.csproj

    - name: Restore dependencies (solution)
      if: matrix.runTests == true
      run: dotnet restore

    - name: Build library for ${{ matrix.framework }}
      if: matrix.runTests != true
      run: dotnet build src/HeroCrypt/HeroCrypt.csproj --no-restore --configuration Release --framework ${{ matrix.framework }}
      env:
        CI: true
        TargetFramework: ${{ matrix.framework }}

    - name: Build solution for ${{ matrix.framework }}
      if: matrix.runTests == true
      run: dotnet build --no-restore --configuration Release --framework ${{ matrix.framework }}
      env:
        CI: true
        TargetFramework: ${{ matrix.framework }}

    - name: Verify netstandard2.0 compilation
      if: matrix.framework == 'netstandard2.0'
      run: |
        echo "netstandard2.0 build succeeded"
        echo "Note: netstandard2.0 is a library target; tests run on concrete frameworks."

    - name: Run tests (excluding slow)
      if: matrix.runTests == true
      run: dotnet test --filter "Category!=Slow" --configuration Release --framework ${{ matrix.framework }} --logger "trx;LogFileName=test-results-${{ matrix.framework }}.trx" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
      env:
        CI: true
        TargetFramework: ${{ matrix.framework }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() && matrix.runTests == true
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.framework }}
        path: '**/test-results-*.trx'

  security-scan:
    name: Security Scan
    needs: determine-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ needs.determine-matrix.outputs.sdk_install_list }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Check for vulnerable packages
      run: |
        # Store output and exit code
        if ! dotnet list package --vulnerable --include-transitive > vuln_check.log 2>&1; then
          echo "Error checking for vulnerabilities"
          cat vuln_check.log
          exit 1
        fi

        # Check if vulnerabilities were found in output
        if grep -q "has the following vulnerable packages" vuln_check.log; then
          echo "ERROR: Vulnerable packages found!"
          cat vuln_check.log
          exit 1
        else
          echo "SUCCESS: No vulnerable packages found"
        fi

    - name: Run security audit
      run: |
        dotnet tool install --global security-scan --version 5.6.7
        export PATH="$PATH:$HOME/.dotnet/tools"
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
        security-scan src/HeroCrypt/HeroCrypt.csproj --excl-proj "**/tests/**" --excl-proj "**/benchmarks/**"

  build-package:
    name: Build NuGet Package
    runs-on: ubuntu-latest
    needs: [determine-matrix, test, security-scan]
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))) || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Required for GitVersion

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ needs.determine-matrix.outputs.sdk_install_list }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      env:
        CI: true
        MULTI_TARGET_BUILD: true

    - name: Create NuGet package
      run: dotnet pack --configuration Release --no-build --output ./artifacts -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
      env:
        CI: true
        MULTI_TARGET_BUILD: true

    - name: Upload NuGet package
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ./artifacts/*.nupkg
        retention-days: 30

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [determine-matrix, build-package]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: Download NuGet package
      uses: actions/download-artifact@v5
      with:
        name: nuget-package
        path: ./artifacts

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ needs.determine-matrix.outputs.latest_sdk }}

    - name: Publish to NuGet
      run: |
        dotnet nuget push ./artifacts/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
