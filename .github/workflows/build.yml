name: Build Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  NUGET_XMLDOC_MODE: skip
  CI: true

jobs:
  test:
    name: Test ${{ matrix.framework }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        framework: [net6.0, net7.0, net8.0, net9.0]
        include:
          - os: ubuntu-latest
            framework: netstandard2.0
          - framework: net6.0
            dotnet-version: '6.0.x'
          - framework: net7.0
            dotnet-version: '7.0.x'
          - framework: net8.0
            dotnet-version: '8.0.x'
          - framework: net9.0
            dotnet-version: '9.0.x'
          - framework: netstandard2.0
            dotnet-version: '8.0.x'
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup .NET SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: Setup additional .NET SDKs
      if: matrix.framework == 'netstandard2.0'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          9.0.x
          
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Build.props', '**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build for ${{ matrix.framework }}
      run: dotnet build --no-restore --configuration Release --framework ${{ matrix.framework }}
      env:
        CI: true
        TargetFramework: ${{ matrix.framework }}
      
    - name: Check for build warnings
      if: matrix.os == 'ubuntu-latest' && matrix.framework == 'net9.0'
      run: |
        echo "Checking for build warnings..."
        if dotnet build --no-restore --configuration Release --framework ${{ matrix.framework }} --verbosity minimal 2>&1 | grep -i "warning"; then
          echo "WARNING: Build completed with warnings (this is expected during development)"
        else
          echo "SUCCESS: Build completed without warnings"
        fi
      
    - name: Verify netstandard2.0 compilation
      if: matrix.framework == 'netstandard2.0'
      run: |
        echo "netstandard2.0 build succeeded"
        echo "Note: netstandard2.0 is a library target; tests run on concrete frameworks."
    
    - name: Run tests (excluding slow)
      if: matrix.framework != 'netstandard2.0'
      run: dotnet test --filter "Category!=Slow" --no-build --configuration Release --framework ${{ matrix.framework }} --logger "trx;LogFileName=test-results-${{ matrix.framework }}.trx" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
      env:
        CI: true
        TargetFramework: ${{ matrix.framework }}
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() && matrix.framework != 'netstandard2.0'
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.framework }}
        path: '**/test-results-*.trx'
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      if: matrix.os == 'ubuntu-latest' && matrix.framework == 'net9.0'
      with:
        files: "**/coverage.cobertura.xml"
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.framework }}
        token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x
          9.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Check for vulnerable packages
      run: |
        # Store output and exit code
        if ! dotnet list package --vulnerable --include-transitive > vuln_check.log 2>&1; then
          echo "Error checking for vulnerabilities"
          cat vuln_check.log
          exit 1
        fi
        
        # Check if vulnerabilities were found in output
        if grep -q "has the following vulnerable packages" vuln_check.log; then
          echo "ERROR: Vulnerable packages found!"
          cat vuln_check.log
          exit 1
        else
          echo "SUCCESS: No vulnerable packages found"
        fi
        
    - name: Run security audit
      run: |
        dotnet tool install --global security-scan --version 5.6.7
        export PATH="$PATH:$HOME/.dotnet/tools"
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
        security-scan HeroCrypt.sln

  build-package:
    name: Build NuGet Package
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Required for GitVersion
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x
          9.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      env:
        CI: true
        MULTI_TARGET_BUILD: true
      
    - name: Create NuGet package
      run: dotnet pack --configuration Release --no-build --output ./artifacts -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
      env:
        CI: true
        MULTI_TARGET_BUILD: true
      
    - name: Upload NuGet package
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ./artifacts/*.nupkg
        retention-days: 30
        
  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: build-package
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Download NuGet package
      uses: actions/download-artifact@v5
      with:
        name: nuget-package
        path: ./artifacts
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Publish to NuGet
      run: |
        dotnet nuget push ./artifacts/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
