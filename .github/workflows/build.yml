name: Build Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

# Cancel in-progress builds when a new commit is pushed to the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  NUGET_XMLDOC_MODE: skip
  CI: true

jobs:
  test:
    name: Test ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          # Primary test targets - full testing on latest frameworks
          - { name: "net9.0 on Ubuntu", os: ubuntu-latest, framework: net9.0, sdk: 9.0.x, runTests: true }
          - { name: "net9.0 on Windows", os: windows-latest, framework: net9.0, sdk: 9.0.x, runTests: true }
          - { name: "net9.0 on macOS", os: macos-latest, framework: net9.0, sdk: 9.0.x, runTests: true }
          - { name: "net8.0 on Ubuntu", os: ubuntu-latest, framework: net8.0, sdk: 8.0.x, runTests: true }

          # Compilation verification only for older frameworks (Ubuntu only)
          - { name: "net7.0 compilation", os: ubuntu-latest, framework: net7.0, sdk: 7.0.x, runTests: false }
          - { name: "net6.0 compilation", os: ubuntu-latest, framework: net6.0, sdk: 6.0.x, runTests: false }
          - { name: "netstandard2.0 compilation", os: ubuntu-latest, framework: netstandard2.0, sdk: 8.0.x, runTests: false }

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET SDK ${{ matrix.sdk }}
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ matrix.sdk }}

    - name: Setup additional SDKs for multi-targeting
      if: matrix.runTests == true
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}-${{ matrix.framework }}
        restore-keys: |
          ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}-
          ${{ runner.os }}-nuget-

    - name: Cache build outputs
      uses: actions/cache@v4
      with:
        path: |
          **/bin/Release
          **/obj/Release
        key: ${{ runner.os }}-build-${{ matrix.framework }}-${{ hashFiles('**/*.cs', '**/*.csproj', '**/Directory.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.framework }}-
          ${{ runner.os }}-build-

    - name: Restore dependencies (library)
      if: matrix.runTests != true
      run: dotnet restore src/HeroCrypt/HeroCrypt.csproj

    - name: Restore dependencies (solution)
      if: matrix.runTests == true
      run: dotnet restore

    - name: Build library for ${{ matrix.framework }}
      if: matrix.runTests != true
      run: dotnet build src/HeroCrypt/HeroCrypt.csproj --no-restore --configuration Release --framework ${{ matrix.framework }}
      env:
        CI: true
        TargetFramework: ${{ matrix.framework }}

    - name: Build solution for ${{ matrix.framework }}
      if: matrix.runTests == true
      run: dotnet build --no-restore --configuration Release --framework ${{ matrix.framework }}
      env:
        CI: true
        TargetFramework: ${{ matrix.framework }}

    - name: Verify netstandard2.0 compilation
      if: matrix.framework == 'netstandard2.0'
      run: |
        echo "netstandard2.0 build succeeded"
        echo "Note: netstandard2.0 is a library target; tests run on concrete frameworks."

    - name: Run tests (excluding slow)
      if: matrix.runTests == true
      run: dotnet test --filter "Category!=Slow" --configuration Release --framework ${{ matrix.framework }} --logger "trx;LogFileName=test-results-${{ matrix.framework }}.trx" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
      env:
        CI: true
        TargetFramework: ${{ matrix.framework }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() && matrix.runTests == true
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.framework }}
        path: '**/test-results-*.trx'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Check for vulnerable packages
      run: |
        # Store output and exit code
        if ! dotnet list package --vulnerable --include-transitive > vuln_check.log 2>&1; then
          echo "Error checking for vulnerabilities"
          cat vuln_check.log
          exit 1
        fi

        # Check if vulnerabilities were found in output
        if grep -q "has the following vulnerable packages" vuln_check.log; then
          echo "ERROR: Vulnerable packages found!"
          cat vuln_check.log
          exit 1
        else
          echo "SUCCESS: No vulnerable packages found"
        fi

    - name: Run security audit
      run: |
        dotnet tool install --global security-scan --version 5.6.7
        export PATH="$PATH:$HOME/.dotnet/tools"
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
        security-scan src/HeroCrypt/HeroCrypt.csproj --excl-proj "**/tests/**" --excl-proj "**/benchmarks/**"

